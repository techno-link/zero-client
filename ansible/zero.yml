---
- name: "configure zero client"
  hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    branch_version: 3

  handlers:
    - name: Reload systemd and restart getty@tty1
      ansible.builtin.systemd:
        daemon_reload: yes
        name: getty@tty1
        state: restarted

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Apply netplan configuration
      ansible.builtin.command:
        cmd: netplan apply
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Reboot
      command: reboot
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

  tasks:
    - name: Print ZEROSTATE value
      debug:
        msg: "ZEROSTATE value is {{ lookup('env', 'ZEROSTATE') }}"

    - name: Check if ZEROSTATE environment variable equals RESET
      debug:
        msg: "ZEROSTATE is RESET, triggering reboot."
      when: lookup('env', 'ZEROSTATE') == 'RESET'
      notify: reboot_system

    # ------------------------------------------------------------------------------------------------------------------
    # UPDATE AND CLEANUP APT
    # ------------------------------------------------------------------------------------------------------------------
    - name: Add the Universe repository
      ansible.builtin.apt_repository:
        repo: 'deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe'
        state: present
        update_cache: yes

    - name: Ensure snapd is installed
      ansible.builtin.apt:
        name: snapd
        state: latest
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Refresh snapd through snap
      ansible.builtin.snap:
        name:
          - snapd
          - core
        state: present
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Upgrade all packages to the latest version
      ansible.builtin.apt:
        name: "*"
        state: latest

    - name: Install/upgrade wget
      ansible.builtin.apt:
        name: wget
        state: latest

    - name: Remove useless packages from the cache and purge
      ansible.builtin.apt:
        autoclean: yes

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes
        purge: yes

    # ------------------------------------------------------------------------------------------------------------------
    # CONFIGURE TTY
    # ------------------------------------------------------------------------------------------------------------------
    - name: Disable other TTYs (tty2-tty6)
      ansible.builtin.systemd:
        name: getty@tty{{ item }}
        enabled: no
        masked: yes
        state: stopped
      loop: [2, 3, 4, 5, 6]
      notify: Reload systemd

    # ------------------------------------------------------------------------------------------------------------------
    # NETWORK CONFIG
    # ------------------------------------------------------------------------------------------------------------------
    - name: Create Netplan configuration for DHCP
      ansible.builtin.copy:
        dest: '/etc/netplan/01-dhcp.yaml'
        content: |
          network:
            version: 2
            renderer: networkd
            ethernets:
              primary:
                match:
                  name: en*
                dhcp4: true
                dhcp-identifier: mac
        owner: root
        group: root
        mode: '0644'
        force: yes
      notify: Apply netplan configuration

    - name: Install basic network debugging tools
      ansible.builtin.apt:
        name:
          - iptables
          - dnsutils
          - iputils-ping
          - traceroute
          - net-tools
          - tcpdump
        state: latest

    - name: Mark traffic through ip tables
      ansible.builtin.iptables:
        chain: OUTPUT
        jump: DSCP
        table: mangle
        set_dscp_mark_class: CS5
        protocol: tcp
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Update hostname
      ansible.builtin.hostname:
        name: "LINKIN-ZERO-{{ branch_version }}"

    # ------------------------------------------------------------------------------------------------------------------
    # OPENBOX AND GUI INSTALLATION
    # ------------------------------------------------------------------------------------------------------------------
    - name: Pre-seed selection for LightDM as the default display manager
      ansible.builtin.debconf:
        name: lightdm
        question: shared/default-x-display-manager
        vtype: select
        value: lightdm

    - name: Install LightDM
      ansible.builtin.apt:
        name:
          - lightdm
        state: latest

    - name: Install GUI Applications
      ansible.builtin.apt:
        name:
          - firefox # Cannot install snaps in chroot
          - gnome-terminal # Cannot install snaps in chroot
          - gnome-system-monitor # Cannot install snaps in chroot
        state: latest
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Configure LightDM for auto-login
      ansible.builtin.copy:
        dest: '/etc/lightdm/lightdm.conf.d/01_autologin.conf'
        content: |
          [Seat:*]
          autologin-user=zero
          autologin-user-timeout=0
          user-session=ubuntu-wayland
        owner: root
        group: root
        mode: '0644'

    - name: Ensure LightDM is enabled and running
      ansible.builtin.systemd:
        name: lightdm
        enabled: yes
        state: started

    # ------------------------------------------------------------------------------------------------------------------
    # WORKSPACE CONFIG
    # ------------------------------------------------------------------------------------------------------------------
    - name: Create required directories for zero user
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: zero
        group: zero
      loop: [
        '/home/zero/.config',
        '/home/zero/.config/linkin'
      ]

    - name: Get workspace configs
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/techno-link/zero-client/v{{ branch_version }}/desktop/{{ item.file }}"
        dest: "{{ item.dest }}"
        force: no
        owner: zero
        group: zero
        mode: "{{ item.mode | default(omit) }}"
      loop:
        - { file: 'wallpaper.jpg', dest: '/home/zero/.config/linkin/wallpaper.jpg' }
      notify: Reboot

    #    - name: Ensure /etc/sudoers.d exists
    #      ansible.builtin.file:
    #        path: /etc/sudoers.d
    #        state: directory
    #        mode: '0755'
    #
    #    - name: Set sudoers file for poweroff and reboot commands
    #      ansible.builtin.copy:
    #        dest: /etc/sudoers.d/poweroff_reboot
    #        content: 'zero ALL=(ALL) NOPASSWD: /sbin/poweroff, /sbin/reboot'
    #        owner: root
    #        group: root
    #        mode: '0440'
    #        validate: '/usr/sbin/visudo -cf %s'

    - name: Allow unprivileged users to create user namespaces
      ansible.builtin.sysctl:
        name: kernel.unprivileged_userns_clone
        value: '1'
        state: present
        reload: yes
        sysctl_set: yes
        sysctl_file: /etc/sysctl.d/99-unprivileged-userns-clone.conf

    # ------------------------------------------------------------------------------------------------------------------
    # GNOME SETTINGS
    # ------------------------------------------------------------------------------------------------------------------
    - name: Set input sources to English and Bulgarian
      command: >
        gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us'), ('xkb', 'bg'), ('xkb', 'bg+phonetic')]"
      become: yes
      become_user: zero
      when: lookup('env', 'ZEROSTATE') == 'RESET' and lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Set shortcut for switching input sources
      command: >
        gsettings set org.gnome.desktop.wm.keybindings switch-input-source "['<Super>space']"
      become: yes
      become_user: zero
      when: lookup('env', 'ZEROSTATE') == 'RESET' and lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Set alternative shortcut for switching input sources
      command: >
        gsettings set org.gnome.desktop.wm.keybindings switch-input-source-backward "['<Shift><Super>space']"
      become: yes
      become_user: zero
      when: lookup('env', 'ZEROSTATE') == 'RESET' and lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Change desktop background
      command: >
        gsettings set org.gnome.desktop.background picture-uri '/home/zero/.config/linkin/wallpaper.jpg'
      become: yes
      become_user: zero
      when: lookup('env', 'ZEROSTATE') == 'RESET' and lookup('env', 'ZEROSTATE') != 'CHROOT'

    # ------------------------------------------------------------------------------------------------------------------
    # CONFIGURE DESKTOP
    # TODO: LIMIT AVAILABLE APPLICATIONS
    # - add icon to apply corporate policies with ZEROSTATE=RESET
    # - add task monitor to replace conky
    # TODO: CONFIGURE DOCK WITH PINNED WORKSPACES AND PARSEC
    # ------------------------------------------------------------------------------------------------------------------


    # ------------------------------------------------------------------------------------------------------------------
    # AWS WORKSPACES CLIENT INSTALL
    # ------------------------------------------------------------------------------------------------------------------
    - name: Install requirements for AWS Workspaces
      ansible.builtin.apt:
        name:
          - libwebkit2gtk-4.0-dev
        state: latest

    - name: Download the AWS Workspaces package if it has been updated
      ansible.builtin.get_url:
        url: 'https://d3nt0h4h6pmmc4.cloudfront.net/new_workspacesclient_jammy_amd64.deb'
        dest: '/home/zero/.config/linkin/workspace_client.deb'
        force: no
        mode: '0755'

    - name: Install the downloaded AWS Workspaces package
      ansible.builtin.apt:
        deb: '/home/zero/.config/linkin/workspace_client.deb'

    # ------------------------------------------------------------------------------------------------------------------
    # PARSEC CLIENT INSTALL
    # ------------------------------------------------------------------------------------------------------------------
    - name: Install requirements for Parsec
      ansible.builtin.apt:
        name:
          - libqt5x11extras5
          - xdg-utils
        state: latest

    - name: Download the Parsec package if it has been updated
      ansible.builtin.get_url:
        url: 'https://builds.parsec.app/package/parsec-linux.deb'
        dest: '/home/zero/.config/linkin/parsec-linux.deb'
        force: no
        mode: '0755'

    - name: Install the downloaded Parsec package
      ansible.builtin.apt:
        deb: '/home/zero/.config/linkin/parsec-linux.deb'
