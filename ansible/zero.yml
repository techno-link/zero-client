---
- name: "configure zero client"
  hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    branch_version: 3
    hide_apps:
      - /usr/share/applications/org.gnome.gedit.desktop
      - /usr/share/applications/gnome-control-center.desktop
      - /usr/share/applications/yelp.desktop
      - /usr/share/applications/org.gnome.Terminal.desktop
      - /usr/share/applications/gnome-language-selector.desktop
      - /usr/share/applications/gnome-session-properties.desktop
      - /usr/share/applications/com.gexperts.Tilix.desktop
      - /usr/share/applications/nm-connection-editor.desktop
      - /var/lib/snapd/desktop/applications/firefox_firefox.desktop

  handlers:
    - name: Reload systemd and restart getty@tty1
      ansible.builtin.systemd:
        daemon_reload: yes
        name: getty@tty1
        state: restarted

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Apply netplan configuration
      ansible.builtin.command:
        cmd: netplan apply
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Reboot
      command: reboot
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

  tasks:
    # ------------------------------------------------------------------------------------------------------------------
    # UPDATE AND CLEANUP APT
    # ------------------------------------------------------------------------------------------------------------------
    - name: Add the Universe repository
      ansible.builtin.apt_repository:
        repo: 'deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe'
        state: present
        update_cache: yes

    - name: Ensure snapd is installed
      ansible.builtin.apt:
        name: snapd
        state: latest
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Refresh snapd through snap
      ansible.builtin.snap:
        name:
          - snapd
          - core
        state: present
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Upgrade all packages to the latest version
      ansible.builtin.apt:
        name: "*"
        state: latest

    - name: Install/upgrade wget
      ansible.builtin.apt:
        name: wget
        state: latest

    - name: Remove useless packages from the cache and purge
      ansible.builtin.apt:
        autoclean: yes

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes
        purge: yes

    # ------------------------------------------------------------------------------------------------------------------
    # CONFIGURE TTY
    # ------------------------------------------------------------------------------------------------------------------
    - name: Disable other TTYs (tty2-tty6)
      ansible.builtin.systemd:
        name: getty@tty{{ item }}
        enabled: no
        masked: yes
        state: stopped
      loop: [2, 3, 4, 5, 6]
      notify: Reload systemd

    # ------------------------------------------------------------------------------------------------------------------
    # NETWORK CONFIG
    # ------------------------------------------------------------------------------------------------------------------
    - name: Create Netplan configuration for DHCP
      ansible.builtin.copy:
        dest: '/etc/netplan/01-dhcp.yaml'
        content: |
          network:
            version: 2
            renderer: networkd
            ethernets:
              primary:
                match:
                  name: en*
                dhcp4: true
                dhcp-identifier: mac
        owner: root
        group: root
        mode: '0644'
        force: yes
      notify: Apply netplan configuration

    - name: Install basic network debugging tools
      ansible.builtin.apt:
        name:
          - iptables
          - dnsutils
          - iputils-ping
          - traceroute
          - net-tools
          - tcpdump
        state: latest

    - name: Mark traffic through ip tables
      ansible.builtin.iptables:
        chain: OUTPUT
        jump: DSCP
        table: mangle
        set_dscp_mark_class: CS5
        protocol: tcp
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Update hostname
      ansible.builtin.hostname:
        name: "LINKIN-ZERO-{{ branch_version }}"

    # ------------------------------------------------------------------------------------------------------------------
    # OPENBOX AND GUI INSTALLATION
    # ------------------------------------------------------------------------------------------------------------------
    - name: Install Gnome
      ansible.builtin.apt:
        name:
          - gdm3
        state: latest

    - name: Install GUI Applications
      ansible.builtin.apt:
        name:
          - firefox # Cannot install snaps in chroot
          - gnome-terminal # Cannot install snaps in chroot
          - gnome-system-monitor # Cannot install snaps in chroot
        state: latest
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Configure GDM for auto-login
      ansible.builtin.copy:
        dest: '/etc/gdm3/custom.conf'
        content: |
          [daemon]
          AutomaticLoginEnable=True
          AutomaticLogin=zero
        owner: root
        group: root
        mode: '0644'

    - name: Set preferred session for auto-login user
      ansible.builtin.copy:
        dest: '/home/zero/.dmrc'
        content: |
          [Desktop]
          Session=ubuntu-wayland
        owner: zero
        group: zero
        mode: '0644'

    - name: Ensure GDM is enabled and running
      ansible.builtin.systemd:
        name: gdm
        enabled: yes
        state: started

    # ------------------------------------------------------------------------------------------------------------------
    # WORKSPACE CONFIG
    # ------------------------------------------------------------------------------------------------------------------
    - name: Allow unprivileged users to create user namespaces
      ansible.builtin.sysctl:
        name: kernel.unprivileged_userns_clone
        value: '1'
        state: present
        reload: yes
        sysctl_set: yes
        sysctl_file: /etc/sysctl.d/99-unprivileged-userns-clone.conf

    - name: Create required directories for zero user
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: zero
        group: zero
      loop: [
        '/home/zero/.config/linkin',
        '/home/zero/.config/autostart',
        '/home/zero/.local/share/applications'
      ]

    - name: Get workspace configs
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/techno-link/zero-client/v{{ branch_version }}/desktop/{{ item.file }}"
        dest: "{{ item.dest }}"
        force: yes
        owner: zero
        group: zero
        mode: "{{ item.mode | default(omit) }}"
      loop:
        - { file: 'wallpaper.jpg', dest: '/home/zero/.config/linkin/wallpaper.jpg' }
        - { file: 'gsettings.sh', dest: '/home/zero/.config/linkin/gsettings.sh', mode: '0755' }
      notify: Reboot

    - name: Ensure the script runs at session start
      copy:
        content: |
          [Desktop Entry]
          Type=Application
          Name=UserSettings
          Exec=/home/zero/.config/linkin/gsettings.sh
          X-GNOME-Autostart-enabled=true
        dest: '/home/zero/.config/autostart/user-settings.desktop'
        owner: zero
        group: zero
        mode: '0644'

    # HIDE APPS
    - name: Copy .desktop files to ~/.local/share/applications
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/home/zero/.local/share/applications/"
        force: yes
        owner: zero
        group: zero
        mode: '0644'
      loop: "{{ hide_apps }}"
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    - name: Ensure NoDisplay=true is set in .desktop files
      ansible.builtin.lineinfile:
        path: "/home/zero/.local/share/applications/{{ item | basename }}"
        insertafter: '^\[Desktop Entry\]'
        line: 'NoDisplay=true'
        create: no
      loop: "{{ hide_apps }}"
      when: lookup('env', 'ZEROSTATE') != 'CHROOT'

    # ALLOW UNLOCK SCREEN
    - name: Add nopasswdlogin rule to gdm-password
      ansible.builtin.lineinfile:
        path: /etc/pam.d/gdm-password
        line: 'auth sufficient pam_succeed_if.so user ingroup nopasswdlogin'
        insertbefore: BOF

    - name: Create nopasswdlogin group
      ansible.builtin.group:
        name: nopasswdlogin
        state: present

    - name: Add user to nopasswdlogin group
      ansible.builtin.user:
        name: "zero"
        groups: nopasswdlogin
        append: yes

    # ------------------------------------------------------------------------------------------------------------------
    # AWS WORKSPACES CLIENT INSTALL
    # ------------------------------------------------------------------------------------------------------------------
    - name: Install requirements for AWS Workspaces
      ansible.builtin.apt:
        name:
          - libwebkit2gtk-4.0-dev
        state: latest

    - name: Check if the AWS Workspaces package exists and get its details
      ansible.builtin.stat:
        path: '/home/zero/.config/linkin/workspace_client.deb'
      register: workspaces_file

    - name: Calculate AWS Workspaces package age in days
      set_fact:
        file_age_days: "{{ ((ansible_date_time.epoch | int) - (workspaces_file.stat.mtime | default(ansible_date_time.epoch | int)) ) / 86400 }}"
      when: workspaces_file.stat.exists

    - name: Download the AWS Workspaces package if it has been updated
      ansible.builtin.get_url:
        url: 'https://d3nt0h4h6pmmc4.cloudfront.net/new_workspacesclient_jammy_amd64.deb'
        dest: '/home/zero/.config/linkin/workspace_client.deb'
        force: yes
        mode: '0755'
      when: not workspaces_file.stat.exists or (file_age_days | default(0) | int) >= 7

    - name: Install the downloaded AWS Workspaces package
      ansible.builtin.apt:
        deb: '/home/zero/.config/linkin/workspace_client.deb'


    # ------------------------------------------------------------------------------------------------------------------
    # PARSEC CLIENT INSTALL
    # ------------------------------------------------------------------------------------------------------------------
    - name: Install requirements for Parsec
      ansible.builtin.apt:
        name:
          - libqt5x11extras5
          - xdg-utils
        state: latest

    - name: Check if the Parsec package exists and get its details
      ansible.builtin.stat:
        path: '/home/zero/.config/linkin/parsec-linux.deb'
      register: parsec_file

    - name: Calculate Parsec package age in days
      set_fact:
        file_age_days: "{{ ((ansible_date_time.epoch | int) - (parsec_file.stat.mtime | default(ansible_date_time.epoch | int)) ) / 86400 }}"
      when: parsec_file.stat.exists

    - name: Download the Parsec package if it has been updated
      ansible.builtin.get_url:
        url: 'https://builds.parsec.app/package/parsec-linux.deb'
        dest: '/home/zero/.config/linkin/parsec-linux.deb'
        force: yes
        mode: '0755'
      when: not parsec_file.stat.exists or (file_age_days | default(0) | int) >= 7

    - name: Install the downloaded Parsec package
      ansible.builtin.apt:
        deb: '/home/zero/.config/linkin/parsec-linux.deb'
        
    # ------------------------------------------------------------------------------------------------------------------
    # SET GEO LOCATION AND TIMEZOME
    # ------------------------------------------------------------------------------------------------------------------
    - name: Get IP geolocation data
      community.general.ipinfoio_facts:
      
    - name: "Set timezone to {{ ansible_facts.timezone }}"
      timezone:
        name: "{{ ansible_facts.timezone }}"
      when: ansible_facts.timezone is defined
